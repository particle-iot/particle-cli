version: 2.1

tag_filters: &tag_filters
  filters:
    tags:
      only: /^test-.*|^v.*/

executors:
  linux:
    docker:
      - image: particle/cimg-node-cross-compile:16.16-3
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  macos:
    macos:
      xcode: 13.4.1

orbs:
  aws-cli: circleci/aws-cli@4.1.1
  node: circleci/node@5.0.2
  win: circleci/windows@5.0.0

commands:
  configure-npm-token:
    description: "A command to configure NPM Token"
    steps:
      - run:
          name: Configure NPM Token
          command: npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN
  install-node:
    description: "A command to install node"
    parameters:
      node-version:
        type: string
    steps:
      - checkout
      - node/install:
          node-version: << parameters.node-version >>
      - configure-npm-token
      - node/install-packages:
          cache-path: node_modules
  run-tests:
    description: "A command to install node and run tests"
    parameters:
      node-version:
        type: string
      test-command:
        type: string
    steps:
      - install-node:
          node-version: << parameters.node-version >>
      - run:
          name: Run Tests
          command: npm run << parameters.test-command >>
  build-package:
    description: "A command to build and sign package"
    parameters:
      node-version:
        type: string
    steps:
      - install-node:
          node-version: << parameters.node-version >>
      - run:
          name: Build Package
          command: npm run build
  sign-win:
    description: "A command to sign windows executable"
    parameters:
      node-version:
        type: string
    steps:
      - run:
          name: Sign Executable
          command: |
            npm run sign:win
  generate-win-installer:
    description: "A command to generate windows installer"
    parameters:
      node-version:
        type: string
    steps:
      - run:
          name: Generate Installer
          command: |
            npm run generate:win-installer
  generate-manifest:
    description: "A command to generate manifest"
    parameters:
        build-path:
            type: string
        version:
            type: string
        s3-bucket:
            type: string
    steps:
      - run:
          name: Generate Manifest
          command: |
            npm run generate:manifest <<parameters.build-path>> <<parameters.version>> <<parameters.s3-bucket>>
  compress-files:
    description: "A command to compress files"
    parameters:
        path:
            type: string
    steps:
      - run:
          name: Compress files
          command: |
            cd <<parameters.path>>
            for file in *; do
              if [ "$file" != "ParticleCLISetup.exe" ]; then
                 gzip "${file}"
              fi
            done
jobs:
  test-unix:
    parameters:
      os:
        type: executor
      node-version:
        type: string
    executor: << parameters.os >>
    steps:
      - run-tests:
          node-version: << parameters.node-version >>
          test-command: test:ci
  test-windows:
    parameters:
      node-version:
        type: string
    executor: win/default
    steps:
      - checkout
      - run:
          name: Install Node
          command: |
            nvm install 16.20.2
            nvm use 16.20.2
      - configure-npm-token
      - run:
          name: Install packages
          command: npm ci
      - run:
          name: Run Tests
          command: npm run test:ci
  test-e2e:
    parameters:
      os:
        type: executor
      node-version:
        type: string
    executor: << parameters.os >>
    steps:
      - run-tests:
          node-version: << parameters.node-version >>
          test-command: test:e2e:ci
  test-coverage:
    parameters:
      os:
        type: executor
      node-version:
        type: string
    executor: << parameters.os >>
    steps:
      - install-node:
          node-version: << parameters.node-version >>
      - run:
          name: Generate Coverage Report
          command: npm run coverage
      - store_artifacts:
          path: coverage
  build-package:
    parameters:
      os:
        type: executor
      node-version:
        type: string
    executor: << parameters.os >>
    steps:
      - build-package:
          node-version: << parameters.node-version >>
      - sign-win:
          node-version: << parameters.node-version >>
      - generate-win-installer:
          node-version: << parameters.node-version >>
      - compress-files:
          path: build
      - store_artifacts:
          path: build
      - save_cache:
          key: v1-build-{{ .Branch }}-{{ .Revision }}
          paths:
            - build
  publish-package:
    parameters:
      os:
        type: executor
    executor: << parameters.os >>
    steps:
      - checkout
      - configure-npm-token
      - run:
          name: Install packages
          command: npm ci
      - restore_cache:
          key: v1-build-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set AWS Role ARN Based on Tag
          command: |
            if [[ "${CIRCLE_TAG}" == v* ]]; then
              echo 'export ROLE_ARN=${AWS_PRD_ROLE_ARN}' >> $BASH_ENV
              echo 'export S3_BUCKET=${AWS_PRD_S3_BUCKET}' >> $BASH_ENV
              echo 'export S3_BUCKET_URL=${PRD_BINARIES_URL}' >> $BASH_ENV
            elif [[ "${CIRCLE_TAG}" == test-* ]]; then
              echo 'export ROLE_ARN=${AWS_ST_ROLE_ARN}' >> $BASH_ENV
              echo 'export S3_BUCKET=${AWS_ST_S3_BUCKET}' >> $BASH_ENV
              echo 'export S3_BUCKET_URL=${ST_BINARIES_URL}' >> $BASH_ENV
            else
              echo "Tag does not meet criteria for setting ROLE_ARN."
              exit 1
            fi
      - generate-manifest:
          build-path: build
          version: $CIRCLE_TAG
          s3-bucket: $S3_BUCKET_URL
      - aws-cli/setup:
          role_arn: ${AWS_ST_ROLE_ARN}
          region: ${AWS_S3_REGION}
          profile_name: "ARTIFACT-UPLOAD"
          role_session_name: "circleci-deploy-public-artifacts-${CIRCLE_BUILD_NUM}"
          session_duration: "1800"
      - run:
          name: Upload to S3
          command: |
            aws s3 --profile ARTIFACT-UPLOAD cp build/release/ s3://${S3_BUCKET}/particle-cli/ --recursive \
            --cache-control "public, max-age=0"
      - run:
          name: Upload cli installer to S3
          command: |
            aws s3 --profile ARTIFACT-UPLOAD cp installer/unix/install-cli s3://${S3_BUCKET}/particle-cli/installer/install-cli \
            --cache-control "public, max-age=0"

  # Copied from following repos
  # https://github.com/particle-iot-inc/cache-aside/blob/2ee9e2d77138f1a9d22a7d604e7f8cc0d45f016e/.circleci/config.yml
  # https://github.com/particle-iot-inc/app-metrics/blob/034e6dd5d77ce3b0683310c81e6f6994be2d1c80/.circleci/config.yml
  # https://github.com/particle-iot-inc/device-service-discovery/blob/d1f4dbcdcab1efba7ba92794670c6e4e973e6265/.circleci/config.yml
  publish-npm:
    docker:
      - image: cimg/node:16.16 # Primary execution image
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - configure-npm-token
      - run:
          name: Install packages
          command: npm ci
      - run:
          name: Publish package
          command: |
            # Publish as beta for pre-release tags like v1.2.3-pre.1
            [[ $CIRCLE_TAG =~ ^v.*- ]] && NPM_TAG=--tag=beta
            npm publish $NPM_TAG

workflows:
  test-and-publish:
    jobs:
     # - test-unix:
     #     <<: *tag_filters
     #     context:
     #       - particle-ci-private
     #     matrix:
     #       parameters:
     #         os: [linux, macos]
     #         node-version: ["16"] # Node 18 doesn't work due to serialport dependency
     # - test-windows:
     #     <<: *tag_filters
     #     context:
     #       - particle-ci-private
     #     matrix:
     #       parameters:
     #         node-version: ["16"] # Node 18 doesn't work due to serialport dependency
     # - test-e2e:
     #     <<: *tag_filters
     #     name: test-e2e-linux
     #     context:
     #       - particle-ci-private
     #     matrix:
     #       parameters:
     #         os: [linux]
     #         node-version: ["16"]
     # - test-e2e:
     #     <<: *tag_filters
     #     name: test-e2e-macos
     #     requires:
     #       - test-e2e-linux
     #     context:
     #       - particle-ci-private
     #     matrix:
     #       parameters:
     #         os: [macos]
     #         node-version: ["16"]
     # - test-coverage:
     #     <<: *tag_filters
     #     context:
     #       - particle-ci-private
     #     matrix:
     #       parameters:
     #         os: [linux]
     #         node-version: ["16"]
      - build-package:
          <<: *tag_filters
          context:
            - particle-ci-private
          matrix:
            parameters:
              os: [linux]
              node-version: ["16"]
      - publish-package:
          requires:
            - build-package
          context:
            - particle-ci-private
          matrix:
            parameters:
              os: [linux]
          filters:
            tags:
              only: /^test-.*|^v.*/ # Publish only for test tags
            branches:
              ignore: /.*/ # Publish only for tags
     # - publish-npm:
     #     requires:
     #       - test-unix
     #       - test-windows
     #       - test-e2e-linux
     #       - test-e2e-macos
     #     context:
     #       - particle-ci-private
     #     # publish for tags only
     #     filters:
     #       tags:
     #         only: /^v.*/
     #       branches:
     #         ignore: /.*/
