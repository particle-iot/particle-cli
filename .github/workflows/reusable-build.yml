name: Build Package

on: [workflow_call]
env:
  E2E_DEVICE_ID: ${{ secrets.E2E_DEVICE_ID }}
  E2E_DEVICE_NAME: ${{ secrets.E2E_DEVICE_NAME }}
  E2E_DEVICE_PLATFORM_ID: ${{ secrets.E2E_DEVICE_PLATFORM_ID }}
  E2E_DEVICE_PLATFORM_NAME: ${{ secrets.E2E_DEVICE_PLATFORM_NAME }}
  E2E_FOREIGN_DEVICE_ID: ${{ secrets.E2E_FOREIGN_DEVICE_ID }}
  E2E_FOREIGN_DEVICE_NAME: ${{ secrets.E2E_FOREIGN_DEVICE_NAME }}
  E2E_FOREIGN_DEVICE_PLATFORM_ID: ${{ secrets.E2E_FOREIGN_DEVICE_PLATFORM_ID }}
  E2E_FOREIGN_DEVICE_PLATFORM_NAME: ${{ secrets.E2E_FOREIGN_DEVICE_PLATFORM_NAME }}
  E2E_FOREIGN_PASSWORD: ${{ secrets.E2E_FOREIGN_PASSWORD }}
  E2E_FOREIGN_USERNAME: ${{ secrets.E2E_FOREIGN_USERNAME }}
  E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
  E2E_PRODUCT_01_DEVICE_01_GROUP: ${{ secrets.E2E_PRODUCT_01_DEVICE_01_GROUP }}
  E2E_PRODUCT_01_DEVICE_01_ID: ${{ secrets.E2E_PRODUCT_01_DEVICE_01_ID }}
  E2E_PRODUCT_01_DEVICE_01_NAME: ${{ secrets.E2E_PRODUCT_01_DEVICE_01_NAME }}
  E2E_PRODUCT_01_DEVICE_01_PLATFORM_ID: ${{ secrets.E2E_PRODUCT_01_DEVICE_01_PLATFORM_ID }}
  E2E_PRODUCT_01_DEVICE_01_PLATFORM_NAME: ${{ secrets.E2E_PRODUCT_01_DEVICE_01_PLATFORM_NAME }}
  E2E_PRODUCT_01_DEVICE_02_GROUP: ${{ secrets.E2E_PRODUCT_01_DEVICE_02_GROUP }}
  E2E_PRODUCT_01_DEVICE_02_ID: ${{ secrets.E2E_PRODUCT_01_DEVICE_02_ID }}
  E2E_PRODUCT_01_DEVICE_02_NAME: ${{ secrets.E2E_PRODUCT_01_DEVICE_02_NAME }}
  E2E_PRODUCT_01_DEVICE_02_PLATFORM_ID: ${{ secrets.E2E_PRODUCT_01_DEVICE_02_PLATFORM_ID }}
  E2E_PRODUCT_01_DEVICE_02_PLATFORM_NAME: ${{ secrets.E2E_PRODUCT_01_DEVICE_02_PLATFORM_NAME }}
  E2E_PRODUCT_01_ID: ${{ secrets.E2E_PRODUCT_01_ID }}
  E2E_PRODUCT_01_NAME: ${{ secrets.E2E_PRODUCT_01_NAME }}
  E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
  PARTICLE_WINDOWS_SIGNING_CERT: ${{ secrets.PARTICLE_WINDOWS_SIGNING_CERT }}
  PARTICLE_WINDOWS_SIGNING_PASS: ${{ secrets.PARTICLE_WINDOWS_SIGNING_PASS }}
jobs:
  build:
    runs-on: ubuntu-latest  # Choose an appropriate runner
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Configure NPM Token
        run: npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}

      - name: Install dependencies
        run: npm install

      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: ~/.pkg-cache
          key: node16-pkg-${{ github.run_id }}
          restore-keys: node16-pkg-

      - name: Add pre-built Node for armv7
        run: |
          mkdir -p ~/.pkg-cache/v3.4
          cp .prebuild/built-v16.16.0-linux-armv7 ~/.pkg-cache/v3.4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm,arm64

      - name: Set up ldid
        uses: MOZGIII/install-ldid-action@v1
        with:
          tag: v2.1.5-procursus7

      - name: Build Package
        run: npm run build

      - name: 'Install makensis (apt)'
        run: sudo apt update && sudo apt install -y nsis nsis-pluginapi

      - name: Download and unzip osslsigncode binary
        run: |
          mkdir osslsigncode
          curl -LJO https://github.com/mtrojnar/osslsigncode/releases/download/2.6/osslsigncode-2.6-ubuntu-20.04.zip
          unzip osslsigncode-2.6-ubuntu-20.04.zip -d osslsigncode
          chmod +x osslsigncode/bin/osslsigncode

      - name: Sign Windows package
        run: |
          npm run sign:win -- particle-cli-win-x64 $(pwd)/osslsigncode/bin/osslsigncode

      - name: Generate Windows installer
        run: |
          npm run generate:win-installer $(pwd)/osslsigncode/bin/osslsigncode

      - name: Save Cache
        uses: actions/cache@v3
        with:
          path: ~/.pkg-cache
          key: node16-pkg-${{ github.run_id }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: build/

